"""
Script para corregir r√°pidamente el error en run.py
Ejecutar desde el directorio ra√≠z del proyecto
"""

import re
from pathlib import Path

def fix_run_py():
    """Corregir el error en run.py"""
    
    run_py_path = Path("run.py")
    
    if not run_py_path.exists():
        print("‚ùå Archivo run.py no encontrado")
        return False
    
    try:
        # Leer contenido actual
        with open(run_py_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Buscar y reemplazar la l√≠nea problem√°tica
        # Patr√≥n para encontrar la llamada a register_blueprints con 2 argumentos
        pattern = r'register_blueprints\(app,\s*logger\)'
        replacement = 'register_blueprints(app)'
        
        if re.search(pattern, content):
            content = re.sub(pattern, replacement, content)
            print("‚úÖ Corregida llamada a register_blueprints(app, logger)")
        else:
            print("‚ö†Ô∏è No se encontr√≥ la l√≠nea espec√≠fica, buscando alternativas...")
            
            # Buscar patrones alternativos
            alt_patterns = [
                r'registered_blueprints\s*=\s*register_blueprints\(app,.*?\)',
                r'register_blueprints\(app,.*?\)'
            ]
            
            for pattern in alt_patterns:
                if re.search(pattern, content):
                    content = re.sub(pattern, 'register_blueprints(app)', content)
                    print("‚úÖ Corregida llamada alternativa a register_blueprints")
                    break
        
        # Tambi√©n asegurar que la funci√≥n register_blueprints tenga la definici√≥n correcta
        func_pattern = r'def register_blueprints\(app\):'
        if re.search(func_pattern, content):
            print("‚úÖ Definici√≥n de funci√≥n register_blueprints correcta")
        else:
            # Buscar la definici√≥n actual y corregirla si es necesaria
            current_def_pattern = r'def register_blueprints\([^)]+\):'
            if re.search(current_def_pattern, content):
                content = re.sub(current_def_pattern, 'def register_blueprints(app, logger=None):', content)
                print("‚úÖ Actualizada definici√≥n de register_blueprints para aceptar logger opcional")
        
        # Escribir el archivo corregido
        with open(run_py_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ Archivo run.py corregido exitosamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error corrigiendo run.py: {e}")
        return False

if __name__ == "__main__":
    print("üîß Corrigiendo error en run.py...")
    if fix_run_py():
        print("\nüöÄ Ahora puedes ejecutar: python run.py")
    else:
        print("\n‚ùå Correcci√≥n manual necesaria")
        print("Busca en run.py la l√≠nea que dice:")
        print("   register_blueprints(app, logger)")
        print("Y c√°mbiala por:")
        print("   register_blueprints(app)")