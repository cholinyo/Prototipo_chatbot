# ========================================================================
# Prototipo_chatbot - Variables de Entorno
# TFM Vicente Caruncho - Sistemas Inteligentes
# ========================================================================

# ===== CONFIGURACIÓN GENERAL =====
# Nombre del proyecto
PROJECT_NAME=Prototipo_chatbot
PROJECT_VERSION=1.0.0
PROJECT_DESCRIPTION="Chatbot RAG para Administraciones Locales - TFM"

# ===== FLASK CONFIGURATION =====
FLASK_ENV=development
FLASK_DEBUG=True
FLASK_HOST=127.0.0.1
FLASK_PORT=5000

# Clave secreta para Flask (CAMBIAR EN PRODUCCIÓN)
SECRET_KEY=prototipo-chatbot-dev-secret-key-change-in-production

# ===== OPENAI API =====
# Obtener en: https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-your-openai-api-key-here
OPENAI_ORG_ID=your-organization-id-optional

# ===== MODELOS DE LENGUAJE =====
# Modelo OpenAI por defecto
DEFAULT_OPENAI_MODEL=gpt-4o-mini
OPENAI_MAX_TOKENS=1000
OPENAI_TEMPERATURE=0.7

# Configuración Ollama (modelos locales)
DEFAULT_LOCAL_MODEL=llama3.2:3b
OLLAMA_BASE_URL=http://localhost:11434
OLLAMA_TIMEOUT=60

# Modelos alternativos disponibles
AVAILABLE_LOCAL_MODELS=llama3.2:3b,mistral:7b,gemma2:2b,phi3:mini
AVAILABLE_OPENAI_MODELS=gpt-4o,gpt-4o-mini,gpt-3.5-turbo

# ===== EMBEDDINGS =====
# Modelo de embeddings por defecto
EMBEDDING_MODEL=all-MiniLM-L6-v2
EMBEDDING_DIMENSION=384
EMBEDDING_DEVICE=cpu
EMBEDDING_BATCH_SIZE=32

# Directorio de cache para modelos
EMBEDDING_CACHE_DIR=data/cache/embeddings

# ===== VECTOR STORES =====
# Vector store por defecto (faiss, chromadb)
DEFAULT_VECTOR_STORE=faiss

# Configuración FAISS
FAISS_INDEX_PATH=data/vectorstore/faiss
FAISS_INDEX_TYPE=IndexFlatL2
FAISS_NORMALIZE_VECTORS=true

# Configuración ChromaDB
CHROMADB_PATH=data/vectorstore/chromadb
CHROMADB_COLLECTION=prototipo_documents
CHROMADB_DISTANCE_FUNCTION=cosine

# ===== RAG CONFIGURATION =====
# Configuración general RAG
RAG_ENABLED=true
RAG_K_DEFAULT=5
RAG_K_MAX=20
RAG_SIMILARITY_THRESHOLD=0.7

# Configuración de chunks
CHUNK_SIZE=500
CHUNK_OVERLAP=50
MAX_QUERY_LENGTH=1000

# Estrategia de recuperación (similarity, mmr, hybrid)
RAG_RETRIEVAL_STRATEGY=similarity
RAG_MMR_DIVERSITY_LAMBDA=0.5

# Reranking
RAG_RERANK_ENABLED=false
RAG_RERANK_MODEL=cross-encoder/ms-marco-MiniLM-L-6-v2
RAG_RERANK_TOP_K=10

# ===== INGESTA DE DATOS =====
# Configuración de procesamiento
INGESTION_BATCH_SIZE=100
INGESTION_MAX_FILE_SIZE_MB=50
INGESTION_PARALLEL_PROCESSING=true
INGESTION_MAX_WORKERS=4

# Formatos soportados (separados por coma)
SUPPORTED_DOCUMENT_FORMATS=.pdf,.docx,.txt,.rtf,.md
SUPPORTED_SPREADSHEET_FORMATS=.xlsx,.xls,.csv
SUPPORTED_WEB_FORMATS=.html,.htm

# OCR (si está disponible)
OCR_ENABLED=false
OCR_LANGUAGE=spa

# ===== LOGGING =====
# Nivel de logging (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO
LOG_FILE=logs/prototipo_chatbot.log
LOG_MAX_BYTES=10485760
LOG_BACKUP_COUNT=5

# Logging estructurado
LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s
LOG_JSON_FORMAT=false

# ===== SEGURIDAD =====
# Rate limiting
RATE_LIMIT_PER_MINUTE=60
RATE_LIMIT_PER_HOUR=1000

# Sesiones
MAX_SESSION_DURATION_HOURS=24
SESSION_CLEANUP_INTERVAL_HOURS=6

# Validación de entrada
SANITIZE_INPUTS=true
MAX_QUERY_LENGTH=1000
MAX_UPLOAD_SIZE_MB=50

# CORS (separar dominios con coma)
ALLOWED_ORIGINS=http://localhost:5000,http://127.0.0.1:5000

# ===== BASE DE DATOS =====
# SQLite para desarrollo
DATABASE_URL=sqlite:///data/prototipo_chatbot.db

# PostgreSQL para producción (comentado por defecto)
# DATABASE_URL=postgresql://user:password@localhost/prototipo_chatbot

# ===== REDIS (para cache y sesiones) =====
# Redis para producción (comentado por defecto)
# REDIS_URL=redis://localhost:6379/0
# REDIS_PASSWORD=your-redis-password

# ===== MONITOREO Y MÉTRICAS =====
# Habilitar métricas
METRICS_ENABLED=true
METRICS_EXPORT_INTERVAL=60

# Directorio de métricas
METRICS_DIR=data/metrics

# ===== DESARROLLO =====
# Configuración de desarrollo
DEVELOPMENT_MODE=true
RELOAD_ON_CHANGE=true
SHOW_SQL_QUERIES=false
ENABLE_DEBUG_TOOLBAR=true

# Testing
TESTING=false
TEST_DATABASE_URL=sqlite:///data/test_prototipo_chatbot.db

# ===== DEPLOYMENT =====
# Configuración para producción
DEPLOYMENT_ENV=development
DEPLOYMENT_PLATFORM=local

# Azure (para deployment en la nube)
# AZURE_SUBSCRIPTION_ID=your-subscription-id
# AZURE_RESOURCE_GROUP=prototipo-chatbot-rg
# AZURE_APP_SERVICE_NAME=prototipo-chatbot-app

# AWS (alternativo)
# AWS_ACCESS_KEY_ID=your-access-key
# AWS_SECRET_ACCESS_KEY=your-secret-key
# AWS_REGION=eu-west-1

# Google Cloud (alternativo)
# GOOGLE_APPLICATION_CREDENTIALS=path/to/service-account.json
# GOOGLE_CLOUD_PROJECT=your-project-id

# ===== INTEGRACIÓN EXTERNA =====
# APIs externas para ingesta
# TRANSPARENCY_API_KEY=your-transparency-api-key
# MUNICIPAL_API_ENDPOINT=https://api.ayuntamiento.es/v1

# Webhooks
# WEBHOOK_SECRET=your-webhook-secret

# ===== BACKUP Y MANTENIMIENTO =====
# Configuración de backup
BACKUP_ENABLED=true
BACKUP_INTERVAL_HOURS=24
BACKUP_RETENTION_DAYS=30
BACKUP_DIR=data/backups

# Limpieza automática
AUTO_CLEANUP_ENABLED=true
CLEANUP_INTERVAL_HOURS=168  # 1 semana
CLEANUP_OLD_LOGS_DAYS=30
CLEANUP_OLD_SESSIONS_HOURS=48

# ===== NOTIFICACIONES =====
# Email (para alertas de sistema)
# SMTP_SERVER=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USERNAME=your-email@gmail.com
# SMTP_PASSWORD=your-app-password
# ADMIN_EMAIL=admin@ejemplo.com

# ===== EXPERIMENTACIÓN TFM =====
# Configuración específica para experimentos del TFM
EXPERIMENT_MODE=true
BENCHMARK_ENABLED=true
COMPARISON_LOGGING=true

# Directorio para resultados de experimentos
EXPERIMENTS_DIR=data/experiments
BENCHMARK_RESULTS_DIR=data/benchmarks

# Métricas específicas del TFM
TRACK_MODEL_PERFORMANCE=true
TRACK_RAG_EFFECTIVENESS=true
TRACK_USER_SATISFACTION=true

# ===== CONFIGURACIÓN AVANZADA =====
# Pool de conexiones
CONNECTION_POOL_SIZE=10
CONNECTION_POOL_TIMEOUT=30

# Cache
CACHE_ENABLED=true
CACHE_TTL_SECONDS=3600
CACHE_MAX_SIZE_MB=100

# Workers async
ASYNC_WORKERS=4
ASYNC_TIMEOUT=30

# ========================================================================
# INSTRUCCIONES DE USO:
# 
# 1. Copiar este archivo como .env:
#    cp .env.example .env
#
# 2. Configurar las variables necesarias:
#    - OPENAI_API_KEY: Obtener en https://platform.openai.com/
#    - SECRET_KEY: Generar una clave segura para producción
#    - Rutas de directorios según tu sistema
#
# 3. Para Ollama:
#    - Instalar: https://ollama.ai/
#    - Descargar modelos: ollama pull llama3.2:3b
#    - Verificar: ollama list
#
# 4. Para producción:
#    - Cambiar FLASK_DEBUG=False
#    - Usar base de datos PostgreSQL
#    - Configurar Redis para cache
#    - Establecer SECRET_KEY segura
#
# ========================================================================